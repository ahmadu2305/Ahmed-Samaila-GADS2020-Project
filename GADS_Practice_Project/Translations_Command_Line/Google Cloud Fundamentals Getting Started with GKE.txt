# Lab Google Cloud Fundamentals: Getting Started with GKE

## Objectives 

In this lab, you learn how to perform the following tasks: 

- Provision a Kubernetes cluster using Kubernetes Engine 

- Deploy and manage Docker containers using kubectl

## Steps 

1. Confirm that needed APIs are enable 

	- gcloud container clusters get-credentials 
	- gcloud services enable containerregistry.googleapis.com

2. Start a Kubernetes Engine Cluster
	
	- In GCP console, on the top right toolbar, click the open Cloud Shell button.
	- Click continue 

3. Get your environment ready using this command:

	export MY_ZONE=us-central1-a 

4. Start a Kubernetes cluster managed by Kubernetes Engine. Name the cluster "webfrontend" and configure it to run 2 nodes:

	gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2

5. After the cluster is created, check your installed version of kubernetes using this command : 

	kubectl version

6. View your running nodes in the GCP Console using this cloud shell command:

	gcloud compute instances list 

7. Run and deploy a container

	1. From your Cloud Shell prompt, launch a single instance of the nginx container. (Nginx is a popular web server.)
		
		kubectl create deploy nginx --image=nginx:1.17.10
	
	2. View the pod running the nginx container: 

		kubectl get pods 
	
	3. Expose the nginx container to the internet: 

		kubectl expose deployment nginx --port 80 --type LoadBalancer

	4. View the new service with this command: 

		Kubectle get services
		
		You can re-run the above command every few seconds until the External-IP field is populated.

	5. Open a new web browser tab and paste your cluster's external IP address into the address bar. The default home page of the Nginx browser is displayed.

	6. Scale up the number of pods running on your service: 
		
		kubectl scale deployment nginx --replicas 3 
	
	7. Confirm that Kubernetes has updated the number of pods:

		kubectl get pods

	8. Confirm that your external IP address has not changed:

		kubectl get services

	9. Return to the web browser tab in which you viewed your cluster's external IP address. Refresh the page to confirm that the nginx web server is still responding.

Congratulations! 

